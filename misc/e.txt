this is just a prototype for a easier C language with better syntax.

Here are some comparision to C language

Operators

&p						p@
*p						p^
***p						p^^^
p[3]						(p+3)^
p.m						p.m
p->m						p^.m
&p[3]						p+3
uint8_t *p					p: u8^
void **p					p: any^^
(uint8_t *)p					p~<u8^>
(void *)p					p~<any^>
((blah*)p[3])->m				(p+3)^~<blah^>^.m
sizeof (struct Blah *)				size(Blah^)
malloc(sizeof(struct A))			malloc(size(A))


======================================================================
Struct definition:
======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

typedef struct A {
    int a; char *b; uint64_t counter;
} A;

A test = {1, "hello", 0};
struct A test = {1, "hello", 0};

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

struct A
    a: isize, b: char^, counter: u64
end

test: A = A{a: 1, b: "hello", counter: 0}

----------------------------------------------------------------------


======================================================================
Function definition:
======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

int main(int argc, char **argv) {
    return 0;
}

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

main(argc: isize, argv: char^^): isize ->
    0.

----------------------------------------------------------------------


======================================================================
Condition:
======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

if (fn1(fn2(val1)) >= fn3(val2)) {
    fn4();
} else if (val3) {
    fn5();
} else {
    fn6();
}

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

if fn1(fn2(val1)) >= fn3(val2)
    fn4()
elif val3
    fn5()
else
    fn6()
end

----------------------------------------------------------------------


======================================================================
Memory allocation:
======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

unsigned int buf[20] = {0};

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

buf: <usize, 20>

buf@ %--> usize^

----------------------------------------------------------------------


