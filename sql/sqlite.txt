-- vim: ft=sql :

-- OPEN A DATABASE --
-- $ sqlite3 dbname.db

-- LOAD --
-- $ sqlite3 dbname.db < dbname.sql

-- BACKUP --
-- $ sqlite3 dbname.db .dump > dbname.sql

-- show databases
.databases

-- show tables inside a db
.tables

-- show the current config
.show
-- show headers
.header on
-- show with a more readable format
.mode column

-- in sqlite, `alter table` only support:
--     1. add new column to table
--     2. rename table

-- special table: sqlite_master(read only)
-- show table info:
select * from sqlite_master where type="table";
-- show trigger or index
select * from sqlite_master where type="trigger" or type="index";


-- glob -- like
-- with glob, * - {0,}, ? - {1}   case sensitive
-- with like, % - {0,}, _ - {1}
select * from company where address like "%-%";
-- is just like
select * from company where address glob "*-*";

select * from company
    where age > (select age from company where salary>60000);

-- joins
-- inner join(the default one)
select * from company inner join department on company.id=department.id;
-- or simply
select * from company join department on company.id=department.id;
-- the `inner` is not necessary

-- using with a list of common column
select * from company join department using (id);

-- outer join(left only)
select * from company left outer join department on company.id=department.id;
-- cross join
select * from company cross join department;

-- union (no duplicate)
select * from company join department on company.id=department.emp_id
    union
    select * from company left outer join department
    on company.id=department.emp_id;
-- union all
select * from company join department on company.id=department.emp_id
    union all
    select * from company left outer join department
    on company.id=department.emp_id;

-- trigger
create trigger audit_log after insert
on company
begin
    insert into audit(EMP_ID, ENTRY_DATE) values(new.ID, datetime("now"));
end;
-- delete trigger
drop trigger trigger_name;

-- index
-- show all index
.indices table_name
-- create index
create index salary_index on company (salary);
-- delete index
drop index index_name;
-- indexed by: force to use named index
select * from company indexed by salary_index where salary<50000;

-- view: using a view is just like using a table
-- create view
create view company_view as select name, age from company;
-- delete view
drop view view_name;

-- transaction
-- ACID: atomicity, consistency, isolation, durability
begin; -- or begin transaction;
-- do something here
commit; -- or end transaction;

-- rollback
begin;
delete from company where age=25;   -- 2 row deleted
rollback;   -- the deleted rows come back

